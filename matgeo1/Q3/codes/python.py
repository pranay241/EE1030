import numpy as np
from scipy.optimize import fsolve
import matplotlib.pyplot as plt

# Define the functions representing the equations
def equations(vars):
    x, y = vars
    eq1 = (3 / x) + (8 / y) + 1  # Setting it equal to zero for fsolve
    eq2 = (1 / x) - (2 / y) - 2  # Setting it equal to zero for fsolve
    return [eq1, eq2]

# Use fsolve to find the intersection points
initial_guesses = [(1, 1), (-1, -1)]  # Initial guesses for fsolve
intersection_points = [fsolve(equations, guess) for guess in initial_guesses]

# Read points from the text files generated by the C code
def read_points(filename):
    x_points = []
    y_points = []

    with open(filename, 'r') as file:
        for line in file:
            x, y = map(float, line.split())
            x_points.append(x)
            y_points.append(y)

    return x_points, y_points

# Read points from text files
x1, y1 = read_points('plot1.txt')
x2, y2 = read_points('plot2.txt')

# Set up the plot
fig, ax = plt.subplots()

# Plot the curves using data from the text files
ax.plot(x1, y1, label=r"$\frac{3}{x} + \frac{8}{y} = -1$", color='blue')
ax.plot(x2, y2, label=r"$\frac{1}{x} - \frac{2}{y} = 2$", color='red')

# Highlight the intersection points
for (x_int, y_int) in intersection_points:
    ax.plot(x_int, y_int, 'o', color='black')  # Highlight the intersection points

# Hide axes
ax.axis('off')

# Set limits to avoid division by zero issues
ax.set_xlim(-10, 10)
ax.set_ylim(-10, 10)

# Show the plot
plt.show()

